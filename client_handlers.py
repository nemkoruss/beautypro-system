from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from database import db
from config import Config

logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CATEGORY, SERVICE, MASTER, PHONE = range(4)

def create_main_keyboard():
    keyboard = [
        ['üíÖ –ú–∞–Ω–∏–∫—é—Ä', 'üë£ –ü–µ–¥–∏–∫—é—Ä'],
        ['üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram –∫–∞–Ω–∞–ª', 'üåê –ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç'],
        ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', 'üìç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ'],
        ['üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–∞–π—Å –≤ PDF']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id in Config.ADMIN_IDS:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=create_main_keyboard()
        )
        return
    
    welcome_message = """
    üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é –º–∞–Ω–∏–∫—é—Ä–∞!
    
    –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏:
    """
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=create_main_keyboard()
    )

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id in Config.ADMIN_IDS:
        return
    
    category = update.message.text.replace('üíÖ ', '').replace('üë£ ', '')
    context.user_data['category'] = category
    
    services = db.get_services_by_category(category)
    if not services:
        await update.message.reply_text(
            "–£—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
        return ConversationHandler.END
    
    keyboard = [[service[2]] for service in services] + [['–ù–∞–∑–∞–¥']]
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è {category.lower()}:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    
    return SERVICE

async def handle_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '–ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=create_main_keyboard()
        )
        return CATEGORY
    
    service_name = update.message.text
    services = db.get_services_by_category(context.user_data['category'])
    
    for service in services:
        if service[2] == service_name:
            context.user_data['service'] = service
            break
    else:
        await update.message.reply_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return SERVICE
    
    service_info = service
    message = (
        f"üíÖ {service_info[2]}\n"
        f"üí∞ –¶–µ–Ω–∞: {service_info[3]} —Ä—É–±.\n"
        f"‚è± –í—Ä–µ–º—è: {service_info[4] // 60} —á–∞—Å. {service_info[4] % 60} –º–∏–Ω.\n"
        f"üë©‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {service_info[6]}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–µ–Ω—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
    )
    
    keyboard = [[f"üí∞ {service_info[3]} —Ä—É–±."], ['–ù–∞–∑–∞–¥']]
    
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    
    return MASTER

async def handle_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '–ù–∞–∑–∞–¥':
        category = context.user_data['category']
        services = db.get_services_by_category(category)
        keyboard = [[service[2]] for service in services] + [['–ù–∞–∑–∞–¥']]
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è {category.lower()}:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SERVICE
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await update.message.reply_text(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    user = update.message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É
    client_id = db.add_client(
        user.id, user.username, user.first_name, user.last_name, phone
    )
    
    service_info = context.user_data['service']
    order_id = db.add_order(client_id, service_info[0], service_info[5])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑! ‚Ññ{order_id}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name or ''}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data['category']}\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {service_info[2]}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service_info[3]} —Ä—É–±.\n"
        f"‚è± –í—Ä–µ–º—è: {service_info[4] // 60} —á–∞—Å. {service_info[4] % 60} –º–∏–Ω.\n"
        f"üë©‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {service_info[6]}\n\n"
        "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in Config.ADMIN_IDS:
        try:
            await context.bot.send_message(admin_id, admin_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!",
        reply_markup=create_main_keyboard()
    )
    
    return ConversationHandler.END

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üìû –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {Config.PHONE_NUMBER}")

async def handle_website(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üåê –ù–∞—à —Å–∞–π—Ç: {Config.WEBSITE_URL}")

async def handle_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {Config.TELEGRAM_CHANNEL}")

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lat, lon = map(float, Config.MAP_COORDINATES.split(','))
    await update.message.reply_location(latitude=lat, longitude=lon)

async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF (–∑–∞–≥–ª—É—à–∫–∞)
    await update.message.reply_text(
        "üìÑ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–π—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
        reply_markup=create_main_keyboard()
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=create_main_keyboard()
    )
    return ConversationHandler.END