from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
import logging
from config import config, logger
from database import db, Service, Client, Order, BotSettings

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id in config.ADMIN_IDS:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    await show_main_menu(update)

async def show_main_menu(update: Update):
    session = db.get_session()
    try:
        settings = session.query(BotSettings).first()
        welcome_message = settings.welcome_message if settings else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å—Ç—É–¥–∏—é –º–∞–Ω–∏–∫—é—Ä–∞!"
        
        keyboard = [
            ['üíÖ –ú–∞–Ω–∏–∫—é—Ä', 'ü¶∂ –ü–µ–¥–∏–∫—é—Ä'],
            ['üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram –∫–∞–Ω–∞–ª', 'üåê –ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç'],
            ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', 'üìç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ'],
            ['üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–∞–π—Å –≤ PDF']
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id in config.ADMIN_IDS:
        return
    
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == 'üíÖ –ú–∞–Ω–∏–∫—é—Ä':
        await show_services(update, '–ú–∞–Ω–∏–∫—é—Ä')
    elif text == 'ü¶∂ –ü–µ–¥–∏–∫—é—Ä':
        await show_services(update, '–ü–µ–¥–∏–∫—é—Ä')
    elif text == 'üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram –∫–∞–Ω–∞–ª':
        await update.message.reply_text(f"–ù–∞—à Telegram –∫–∞–Ω–∞–ª: {config.TELEGRAM_CHANNEL}")
    elif text == 'üåê –ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç':
        await update.message.reply_text(f"–ù–∞—à —Å–∞–π—Ç: {config.WEBSITE_URL}")
    elif text == 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å':
        await update.message.reply_text(f"–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: {config.PHONE_NUMBER}")
    elif text == 'üìç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ':
        await update.message.reply_location(
            latitude=config.LOCATION_LAT,
            longitude=config.LOCATION_LON
        )
    elif text == 'üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–∞–π—Å –≤ PDF':
        from create_pdf import generate_price_list
        pdf_path = generate_price_list()
        if pdf_path:
            with open(pdf_path, 'rb') as pdf_file:
                await update.message.reply_document(
                    document=pdf_file,
                    caption="–ù–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
                )
        else:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É—Å–ª—É–≥
    elif ' - ' in text and ' —Ä—É–±. (' in text:
        service_name = text.split(' - ')[0]
        await show_service_details(update, service_name)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é —É—Å–ª—É–≥
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await show_main_menu(update)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
    elif text.startswith('–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞'):
        master_name = text.split('(')[1].split(')')[0]
        await ask_for_phone(update, context, master_name)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω)
    elif 'awaiting_phone' in context.user_data:
        await process_phone_input(update, context)

async def show_services(update: Update, category: str):
    session = db.get_session()
    try:
        services = session.query(Service).filter_by(category=category).all()
        
        if not services:
            await update.message.reply_text("–£—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        keyboard = []
        for service in services:
            keyboard.append([f"{service.name} - {service.price} —Ä—É–±. ({service.duration} –º–∏–Ω)"])
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ({category}):", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error showing services: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

async def show_service_details(update: Update, service_name: str):
    session = db.get_session()
    try:
        service = session.query(Service).filter_by(name=service_name).first()
        
        if service:
            keyboard = [
                [f"–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ ({service.master})"],
                ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
            ]
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"–£—Å–ª—É–≥–∞: {service.name}\n"
                f"–¶–µ–Ω–∞: {service.price} —Ä—É–±.\n"
                f"–í—Ä–µ–º—è: {service.duration} –º–∏–Ω.\n"
                f"–ú–∞—Å—Ç–µ—Ä: {service.master}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error showing service details: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

async def ask_for_phone(update: Update, context: ContextTypes.DEFAULT_TYPE, master_name: str):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Å—Ç–µ—Ä–µ –≤ context
    context.user_data['awaiting_phone'] = True
    context.user_data['master'] = master_name
    
    # –ù–∞—Ö–æ–¥–∏–º —É—Å–ª—É–≥—É –ø–æ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞
    session = db.get_session()
    try:
        service = session.query(Service).filter_by(master=master_name).first()
        if service:
            context.user_data['service'] = service.name
            context.user_data['category'] = service.category
            context.user_data['price'] = service.price
            context.user_data['duration'] = service.duration
            
    except Exception as e:
        logger.error(f"Error finding service: {e}")
    finally:
        session.close()
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=ReplyKeyboardRemove()
    )

async def process_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π "–ù–∞–∑–∞–¥"
    if phone == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await show_main_menu(update)
        context.user_data.pop('awaiting_phone', None)
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not any(char.isdigit() for char in phone) or len(phone) < 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    
    session = db.get_session()
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = Client(
            telegram_id=update.message.from_user.id,
            first_name=update.message.from_user.first_name,
            phone=phone
        )
        session.add(client)
        session.flush()
        
        # –ù–∞—Ö–æ–¥–∏–º —É—Å–ª—É–≥—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        service_name = context.user_data.get('service')
        service = session.query(Service).filter_by(name=service_name).first()
        
        if service:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            order = Order(
                client_id=client.id,
                service_id=service.id,
                master_name=context.user_data.get('master'),
                status='pending'
            )
            session.add(order)
            session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in config.ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                             f"–ö–ª–∏–µ–Ω—Ç ‚Ññ {client.id}:\n"
                             f"–ò–º—è - {client.first_name}\n"
                             f"–¢–µ–ª–µ—Ñ–æ–Ω - {client.phone}\n"
                             f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ - {context.user_data.get('category')}\n"
                             f"–£—Å–ª—É–≥–∞ - {service.name}\n"
                             f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {service.price} —Ä—É–±.\n"
                             f"–í—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ - {service.duration} –º–∏–Ω.\n"
                             f"–ú–∞—Å—Ç–µ—Ä - {context.user_data.get('master')}\n\n"
                             f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏!"
                    )
                except Exception as e:
                    logger.error(f"Error sending notification to admin {admin_id}: {e}")
            
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            await show_main_menu(update)
        
    except Exception as e:
        session.rollback()
        logger.error(f"Error saving order: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()
        context.user_data.pop('awaiting_phone', None)