from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from config import config
from database import db

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PHONE, SERVICE_SELECTION = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º user_data –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    
    if update.message.from_user.id in config.ADMIN_IDS:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é
        keyboard = [['/admin']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é
    welcome_message = db.get_setting('welcome_message') or '–†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞ "–ù–æ–≥–æ—Ç–æ—á–∫–∏-–¢–æ—á–∫–∞"!'
    
    keyboard = [
        ['–ú–∞–Ω–∏–∫—é—Ä', '–ü–µ–¥–∏–∫—é—Ä', '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ'],
        ['–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª', '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', '–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É
    if update.message.from_user.id in config.ADMIN_IDS and not context.user_data.get('in_admin'):
        keyboard = [['/admin']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    
    text = update.message.text
    
    if text == '–ú–∞–Ω–∏–∫—é—Ä':
        services = db.get_services_by_category('–ú–∞–Ω–∏–∫—é—Ä')
        if not services:
            await update.message.reply_text("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É—Å–ª—É–≥–∏ –º–∞–Ω–∏–∫—é—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
            
        keyboard = []
        for service in services:
            keyboard.append([f"{service[1]} - {service[2]} —Ä—É–±."])
        keyboard.append(['–ù–∞–∑–∞–¥'])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞–Ω–∏–∫—é—Ä–∞:", reply_markup=reply_markup)
    
    elif text == '–ü–µ–¥–∏–∫—é—Ä':
        services = db.get_services_by_category('–ü–µ–¥–∏–∫—é—Ä')
        if not services:
            await update.message.reply_text("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É—Å–ª—É–≥–∏ –ø–µ–¥–∏–∫—é—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
            
        keyboard = []
        for service in services:
            keyboard.append([f"{service[1]} - {service[2]} —Ä—É–±."])
        keyboard.append(['–ù–∞–∑–∞–¥'])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ–¥–∏–∫—é—Ä–∞:", reply_markup=reply_markup)
    
    elif text == '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ':
        services = db.get_services_by_category('–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ')
        if not services:
            await update.message.reply_text("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É—Å–ª—É–≥–∏ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
            
        keyboard = []
        for service in services:
            keyboard.append([f"{service[1]} - {service[2]} —Ä—É–±."])
        keyboard.append(['–ù–∞–∑–∞–¥'])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    
    elif text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª':
        channel_url = db.get_setting('telegram_channel') or config.TELEGRAM_CHANNEL
        await update.message.reply_text(f"–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: {channel_url}")
    
    elif text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
        website_url = db.get_setting('website_url') or config.WEBSITE_URL
        await update.message.reply_text(f"–ù–∞—à —Å–∞–π—Ç: {website_url}")
    
    elif text == '–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏':
        lat = float(db.get_setting('location_lat') or config.LOCATION_LAT)
        lon = float(db.get_setting('location_lon') or config.LOCATION_LON)
        await update.message.reply_location(latitude=lat, longitude=lon)
        await update.message.reply_text("–ù–∞—à –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ:")
    
    elif text == '–ù–∞–∑–∞–¥':
        keyboard = [
            ['–ú–∞–Ω–∏–∫—é—Ä', '–ü–µ–¥–∏–∫—é—Ä', '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ'],
            ['–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª', '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', '–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥–∏
        services = db.get_all_services()
        for service in services:
            service_text = f"{service[2]} - {service[3]} —Ä—É–±."
            if text == service_text:
                context.user_data['selected_service'] = service[0]
                await update.message.reply_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service[2]}\n"
                    f"–¶–µ–Ω–∞: {service[3]} —Ä—É–±.\n"
                    f"–í—Ä–µ–º—è: {service[4]}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
                    reply_markup=ReplyKeyboardRemove()
                )
                return PHONE

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é.")

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_number = update.message.text
    service_id = context.user_data.get('selected_service')
    
    if service_id:
        service = db.get_service_by_id(service_id)
        client_id = db.add_client(
            update.message.from_user.id,
            update.message.from_user.first_name,
            phone_number,
            service_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        from main import application
        for admin_id in config.ADMIN_IDS:
            try:
                await application.bot.send_message(
                    admin_id,
                    f"üéâ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                    f"–ö–ª–∏–µ–Ω—Ç ‚Ññ {client_id}: {update.message.from_user.first_name}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                    f"–£—Å–ª—É–≥–∞: {service[2]} ({service[1]})\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {service[3]} —Ä—É–±.\n"
                    f"–í—Ä–µ–º—è: {service[4]}\n\n"
                    "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏!"
                )
            except Exception as e:
                logging.error(f"Error sending message to admin {admin_id}: {e}")
        
        keyboard = [['/start']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=reply_markup
        )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('selected_service', None)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
    )
    return ConversationHandler.END