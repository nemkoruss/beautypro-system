from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
import logging
from config import config, logger
from database import db, Service, Master, Client, Order, BotSettings

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in config.ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
        ['üë©‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞'],
        ['üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã', '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É—Å–ª—É–≥–∏'],
        ['üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'],
        ['üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤'],
        ['üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–∞–π—Å', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    print(f"–ê–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ù–∞–∑–≤–∞–Ω–∏–µ|–¶–µ–Ω–∞|–í—Ä–µ–º—è(–º–∏–Ω)|–ú–∞—Å—Ç–µ—Ä\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–Ω–∏–∫—é—Ä|–ì–µ–ª—å-–ª–∞–∫|2000|90|–ê–Ω–Ω–∞",
            reply_markup=ReplyKeyboardRemove()
        )
    
    elif text == 'üë©‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ò–º—è|–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è|–¢–µ–ª–µ—Ñ–æ–Ω\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞|–ú–∞–Ω–∏–∫—é—Ä|+79991234567",
            reply_markup=ReplyKeyboardRemove()
        )
    
    elif text == 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã':
        await show_services_for_edit(update, 'price')
    
    elif text == '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É—Å–ª—É–≥–∏':
        await show_services_for_edit(update, 'duration')
    
    elif text == 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
    
    elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=ReplyKeyboardRemove()
        )
    
    elif text == 'üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤':
        await show_clients_list(update)
    
    elif text == 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤':
        await show_orders_list(update)
    
    elif text == 'üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–∞–π—Å':
        from create_pdf import generate_price_list
        pdf_path = generate_price_list()
        if pdf_path:
            with open(pdf_path, 'rb') as pdf_file:
                await update.message.reply_document(
                    document=pdf_file,
                    caption="–¢–µ–∫—É—â–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
                )
    
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏, –º–∞—Å—Ç–µ—Ä–∞ –∏ —Ç.–¥.)
        await process_admin_input(update, context, text)

async def show_services_for_edit(update: Update, edit_type: str):
    session = db.get_session()
    try:
        services = session.query(Service).all()
        
        if not services:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
            return
        
        keyboard = []
        for service in services:
            if edit_type == 'price':
                keyboard.append([f"üí∞ {service.name} - {service.price} —Ä—É–±."])
            else:
                keyboard.append([f"‚è∞ {service.name} - {service.duration} –º–∏–Ω."])
        
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        if edit_type == 'price':
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error showing services for edit: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        session.close()

async def show_clients_list(update: Update):
    session = db.get_session()
    try:
        clients = session.query(Client).order_by(Client.created_at.desc()).limit(10).all()
        
        if not clients:
            await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        
        message = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        for client in clients:
            message += f"ID: {client.id}\n–ò–º—è: {client.first_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n–î–∞—Ç–∞: {client.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"Error showing clients: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
    finally:
        session.close()

async def show_orders_list(update: Update):
    session = db.get_session()
    try:
        orders = session.query(Order).order_by(Order.created_at.desc()).limit(10).all()
        
        if not orders:
            await update.message.reply_text("–ù–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return
        
        message = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤:\n\n"
        for order in orders:
            service = session.query(Service).get(order.service_id)
            client = session.query(Client).get(order.client_id)
            message += f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}\n–£—Å–ª—É–≥–∞: {service.name if service else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n–ö–ª–∏–µ–Ω—Ç: {client.first_name if client else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n–°—Ç–∞—Ç—É—Å: {order.status}\n–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"Error showing orders: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.")
    finally:
        session.close()

async def process_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–∞
    if '|' in text:
        parts = text.split('|')
        if len(parts) == 5:  # –£—Å–ª—É–≥–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ù–∞–∑–≤–∞–Ω–∏–µ|–¶–µ–Ω–∞|–í—Ä–µ–º—è|–ú–∞—Å—Ç–µ—Ä
            await add_service(update, parts)
        elif len(parts) == 3:  # –ú–∞—Å—Ç–µ—Ä: –ò–º—è|–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è|–¢–µ–ª–µ—Ñ–æ–Ω
            await add_master(update, parts)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def add_service(update: Update, parts: list):
    try:
        category, name, price, duration, master = parts
        price = float(price.strip())
        duration = int(duration.strip())
        
        session = db.get_session()
        service = Service(
            category=category.strip(),
            name=name.strip(),
            price=price,
            duration=duration,
            master=master.strip()
        )
        session.add(service)
        session.commit()
        
        await update.message.reply_text("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await show_admin_menu(update, None)
        
    except Exception as e:
        logger.error(f"Error adding service: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

async def add_master(update: Update, parts: list):
    try:
        name, specialization, phone = parts
        
        session = db.get_session()
        master = Master(
            name=name.strip(),
            specialization=specialization.strip(),
            phone=phone.strip()
        )
        session.add(master)
        session.commit()
        
        await update.message.reply_text("‚úÖ –ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await show_admin_menu(update, None)
        
    except Exception as e:
        logger.error(f"Error adding master: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")